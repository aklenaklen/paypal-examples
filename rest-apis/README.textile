h1. PayPal REST API SDK

The PayPal REST API SDK is a wrapper on top of the PayPal REST APIs at https://developer.paypal.com/webapps/developer/docs/api/

h2. Initiating your OAuth 2 access token session

Before making any requests below, you first need to include the SDK and authenticate with the API.  At the top of your integration, simply include the following two lines:
<notextile>
<pre>
require_once("requests.php");
$paypal = new paypal();
</pre>
</notextile>

h2. Initiating Your Login Session

Before making requests to any of the methods of the Reddit SDK, you first need to authenticate by calling the login method with your username and password.  This will populate your user hash and session data.
<notextile>
<pre>
require_once("reddit.php");
$reddit = new reddit("USERNAME", "PASSWORD");
</pre>
</notextile>

h2. SDK Methods

Once you are authenticated, you may then make requests to any of the methods in the SDK.  The following examples show the functionality that you can use the SDK for:

*Processing a payment with a credit card*
To process money from a credit card (behind the scenes without pushing to PayPal), create the payment / transaction object and invoke the *process_cc_payment* method.
<notextile>
<pre>
$request = array(
    "intent" => "sale",
    "payer"  => array(
        "payment_method" => "credit_card",
        "funding_instruments" => array(array(
            "credit_card" => array(
                "number" => "5500005555555559",
                "type" => "mastercard",
                "expire_month" => 12,
                "expire_year" => 2018,
                "cvv2" => 111,
                "first_name" => "Joe",
                "last_name" => "Shopper"    
            )
        ))
    ),
    "transactions" => array(array(
        "amount" => array(
            "total" => "7.47",
            "currency" => "USD"
        ),
        "description" => "This is my payment description"
    ))
);
print_r($paypal->process_cc_payment($request));
</pre>
</notextile>

*Processing a payment with PayPal*
To process money from PayPal, we need to build a redirect to PayPal that uses a cookie to store a payment ID before the redirect.  If the *id* cookie is set, it means that we are coming back from the redirect where the user has authorized the payment.  If that is the case, we simply invoke the *execute_payment* method to complete the transaction
If that cookie does not exist, it means we have not pushed the user to PayPal to process the payment yet.  In this case, we simply build the payment / transaction object, with the places PayPal should redirect to complete the sale or cancel, and invoke the *process_pp_payment* method.
<notextile>
<pre>
if (isset($_COOKIE['id'])){
    $request = array("payer_id" => $_GET['PayerID']);
    print_r($paypal->execute_payment($_COOKIE['id'], $request));
} else {
    $request = array(
        "intent" => "sale",
        "payer"  => array(
            "payment_method" => "paypal"
        ),
        "transactions" => array(array(
            "amount" => array(
                "total" => "7.47",
                "currency" => "USD"
            ),
            "description" => "This is my payment description"
        )),
        "redirect_urls" => array(
            "return_url" => "http://yoursite.com/return.php",
            "cancel_url" => "http://yoursite.com/cancel.php"
        )
    );
    
    $paypal->process_pp_payment($request);
}
</pre>
</notextile>

*Making a payment authorization (holding the money for capturing at a later time)*
To authorize a payment for later capturing (holding the funds), we use a very similar technique as with processing a credit card, but we change the *intent* in the request object to *authorize*, and invoke the *process_cc_payment* method.
<notextile>
<pre>
$request = array(
    "intent" => "authorize",
    "payer"  => array(
        "payment_method" => "credit_card",
        "funding_instruments" => array(array(
            "credit_card" => array(
                "number" => "5500005555555559",
                "type" => "mastercard",
                "expire_month" => 12,
                "expire_year" => 2018,
                "cvv2" => 111,
                "first_name" => "Joe",
                "last_name" => "Shopper"    
            )
        ))
    ),
    "transactions" => array(array(
        "amount" => array(
            "total" => "7.47",
            "currency" => "USD"
        ),
        "description" => "This is my payment description"
    ))
);
print_r($paypal->process_cc_payment($request));
</pre>
</notextile>

*Capturing a pre-authorized payment*
To capture a payment that was already authorize (take the payment out of hold and transfer the funds) we simply set our request object, which includes the authorization ID (obtained from making an authorization payment), and call *capture_authorization*
<notextile>
<pre>
$id = "4PR70582UT282945J";
$request = array("is_final_capture" => true,
                 "amount" => array("currency" => "USD",
                                   "total" => "4.54"));

print_r($paypal->capture_authorization($id, $request));
</pre>
</notextile>

*Store a credit card in the vault*
To store a credit card securely in the vault (and receive a lookup ID for it), set the credit card object and send it through to the *store_cc* method.
<notextile>
<pre>
$credit_card = array("type" => "visa",
                     "number" => "4417119669820331",
                     "expire_month" => "11",
                     "expire_year" => "2018",
                     "first_name" => "Joe",
                     "last_name" => "Shopper");

print_r($paypal->store_cc($credit_card));
</pre>
</notextile>

*Fetch a credit card reference from the vault*
To retrieve a credit card reference from the vault, we pass the credit card reference ID (obtained from storing the credit card) to the *fetch_cc* method.
<notextile>
<pre>
$ccid = "CARD-35Y54265JC7133454KFM5G4I";
print_r($paypal->fetch_cc($ccid));
</pre>
</notextile>

*Look up information about a payment*
To look up state and transaction details about a payment, send the payment ID (obtained when making a payment request) to the *fetch_single_payment* method. 
<notextile>
<pre>
$id = "PAY-5JH752195H683312PKFM5GNI";
print_r($paypal->fetch_single_payment($id));
</pre>
</notextile>

*Refund a payment that was already made*
To refund a payment, send the sale ID (obtained when making a payment request) to the *refund_sale* method. 
<notextile>
<pre>
$sale_id = "8RV385008S218341G";
$paypal->refund_sale($sale_id);
</pre>
</notextile>